// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	articles "NEWSAPP/features/Articles"

	mock "github.com/stretchr/testify/mock"
)

// ServiceArtikelInterface is an autogenerated mock type for the ServiceArtikelInterface type
type ServiceArtikelInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: artikel
func (_m *ServiceArtikelInterface) Create(artikel articles.Artikel) error {
	ret := _m.Called(artikel)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(articles.Artikel) error); ok {
		r0 = rf(artikel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id, userid
func (_m *ServiceArtikelInterface) Delete(id uint, userid uint) error {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllArtikel provides a mock function with given fields:
func (_m *ServiceArtikelInterface) GetAllArtikel() ([]articles.Artikel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllArtikel")
	}

	var r0 []articles.Artikel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]articles.Artikel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []articles.Artikel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.Artikel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ServiceArtikelInterface) GetById(id uint) (*articles.Artikel, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *articles.Artikel
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*articles.Artikel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *articles.Artikel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*articles.Artikel)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, userid, artikel
func (_m *ServiceArtikelInterface) Update(id uint, userid uint, artikel articles.Artikel) error {
	ret := _m.Called(id, userid, artikel)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, articles.Artikel) error); ok {
		r0 = rf(id, userid, artikel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceArtikelInterface creates a new instance of ServiceArtikelInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceArtikelInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceArtikelInterface {
	mock := &ServiceArtikelInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
